"""
Contains class that allows reading and writing stable pose data.
Author: Nikhil Sharma
"""

import os
import sys
import math
import stable_poses as st
import obj_file

class StablePoseFile:
    """
    A StablePoseFile contains stable pose data for meshes located
    as the same directory as it.
    """

    def __init__(self, filepath):
        """
        Set the path to the file to open.
        """
        self.filepath = filepath
        file_root, file_ext = os.path.splitext(self.filepath)
        if file_ext != ".stp":
            print "Extension", file_ext
            raise Exception("Cannot load file extension %s. Please supply a .stp file" %(file_ext))

    def get_filepath(self):
        """
        Returns the path to the file to read / write.
        """
        return self.filepath

    def read(self):
        # TO BE IMPLEMENTED
        return None

    def write(self, path):
        """
        Writes stable pose data for meshes in the current working directory to an stp file.
        """

        min_prob = sys.argv[2]
        mesh_index = 1

        mesh_files = [filename for filename in os.listdir(path) if filename[-4:] == ".obj"]
        f = open(self.filepath, 'w')
        f.write("#############################################################\n")
        f.write("# STP file generated by UC Berkeley Automation Sciences Lab #\n")
        f.write("#                                                           #\n")
        f.write("# Num Meshes: %d" %len(mesh_files))
        for _ in range(47 - len(mesh_files)):
            f.write(" ")
        f.write(" #\n")
        f.write("# Min Probability: %s" %min_prob)
        for _ in range(40 - len(min_prob)):
            f.write(" ")
        f.write(" #\n")
        f.write("#                                                           #\n")
        f.write("#############################################################\n")
        f.write("\n")

        min_prob = float(sys.argv[2])
        mesh_index = 1

        for filename in mesh_files:
            if filename[-4:] == ".obj":
                # pose header
                f.write("##########")
                for _ in range(int(math.log10(mesh_index))):
                    f.write("#")
                f.write("\n")
                f.write("# MESH %d #\n" %mesh_index)
                f.write("##########")
                for _ in range(int(math.log10(mesh_index))):
                    f.write("#")
                f.write("\n\n")
                mesh_index = mesh_index + 1

                # computing R matrices for poses
                ob = obj_file.ObjFile(path + "/" + filename)
                mesh = ob.read()
                mesh.remove_unreferenced_vertices()
                prob_mapping, cv_hull = st.compute_stable_poses(mesh), mesh.convex_hull()
                R_list = []
                for face, p in prob_mapping.items():
                    if p >= min_prob:
                        R_list.append([p, st.compute_basis([cv_hull.vertices()[i] for i in face])])

                # adding R matrices to .stp file
                pose_index = 1
                for i in range(len(R_list)):
                    f.write("p %f\n" %R_list[i][0])
                    f.write("r %f %f %f\n" %(R_list[i][1][0][0], R_list[i][1][0][1], R_list[i][1][0][2]))
                    f.write("  %f %f %f\n" %(R_list[i][1][1][0], R_list[i][1][1][1], R_list[i][1][1][2]))
                    f.write("  %f %f %f\n" %(R_list[i][1][2][0], R_list[i][1][2][1], R_list[i][1][2][2]))
                f.write("\n\n")


stp = StablePoseFile('test.stp')
stp.write(".")







